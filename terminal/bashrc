#
# ~/.bashrc
# Author: Giovane Boaviagem (about.me/giovanebribeiro)
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

TERM=xterm-256color

# If neofetch exists, run it only once.
flag_file="/tmp/neofetch_exists"
if [ ! -f $flag_file ]
then
  command -v neofetch >/dev/null 2>&1 && { neofetch; echo ; touch $flag_file ; }
fi

DOTFILES_LOC=`cat $HOME/.dotfiles-loc`

################################
###### SECTION 0: SOURCES ######
################################

source $DOTFILES_LOC/common/colorTable.sh
if [ -f "$HOME/.git-completion.bash" ]
then
  source $HOME/.git-completion.bash
fi

##################################
###### SECTION 1: CONSTANTS ######
##################################


# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

################################
###### SECTION 2: ALIASES ######
################################

# General Aliases
alias tmux='tmux -2'
alias ..='cd ..'
alias t='bash $HOME/todo.txt/todo.sh'
alias tree='ls -R | grep ":$" | sed -e "s/:$//" -e "s/[^-][^\/]*\//--/g" -e "s/^/   /" -e "s/-/|/"'
alias la='ls -la'
alias ll='ls -l'
alias cleanDocker='docker system prune -a'
alias cleanContainers='docker container stop $(docker container ls -lq) && docker container rm $(docker container ls -lq)'
alias cleanImages='docker stop $(docker ps -q) && docker stop $(docker ps -aq)'

# General exports
export NODE_ENV="development"


# ALIASES per OS
[ -r "$HOME/.aliases" ] && source "$HOME/.aliases" &>/dev/null

################################
###### SECTION 3: EXPORTS ######
################################

# General Exports

# EXPORTS per OS
[ -r "$HOME/.exports" ] && source "$HOME/.exports" &>/dev/null


##################################
###### SECTION 4: FUNCTIONS ######
##################################

##
# returns the current git branch name
##
parse_git_branch(){
  git --version | grep "git" > /dev/null 2>&1 || return # check if git is installed

  git status > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    echo `git status 2> /dev/null` | grep "git add <" > /dev/null 2>&1 # if "git add <file> ... is part of message, the branch has changes"
    if [ "$?" -eq "0" ] ; then
      echo " ${bRed}`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'` "
    else
      echo " ${bGreen}`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'` "
    fi
  else
    echo 
  fi
}

##
# returns the remote branch attatched to current branch
##
git_remote_branch(){
  git --version | grep "git" > /dev/null 2>&1 || return # check if git is installed

  OUT_PULL=$(git status 2> /dev/null | grep 'atrÃ¡s\|behind') 
  OUT_OK=$(git status 2> /dev/null | grep 'clean\|vazio') 
  OUT_PUSH=$(git status 2> /dev/null | grep 'frente\|ahead')

  git status > /dev/null 2>&1 
  if [ "$?" == "0" ]; then
    STATUS_REMOTE="${bGreen}="
    
    if [ "$OUT_PULL" != "" ]; then   
      STATUS_REMOTE="${bYellow}v" 
    fi

    if [ "$OUT_PUSH" != "" ]; then   
      STATUS_REMOTE="${bYellow}^" 
    fi
    
    echo "${bMagenta}[`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null`${rWhite}($STATUS_REMOTE${rWhite})${bMagenta}]" 
  else
    echo
  fi
}

##
# Converts a unicode code (like '\u250c')
# in a set readable by PS1 var ()
##
unicode_to_hex(){
  echo -e $1 | hexdump -v -e '/1 "%03o "' | awk '{print "\\" $1 "\\" $2 "\\" $3 }'
}

##
# Set the title of console
##
title() { 
#  printf '\e]2;%s\a' "$*";
  echo -n -e "\033]0;$*\007";
}

#####################################
###### SECTION 4: PS1 VARIABLE ######
#####################################

export PS1="\[${bWhite}\w\$(parse_git_branch)\$(git_remote_branch)${reset} \]\
  \[\n\$ "
# In Windows Git Bash, use this PS1 instead
#export PS1="\[${bCyan}\W`parse_git_branch``git_remote_branch`${reset}\]\
#  \[\n\$ "

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
