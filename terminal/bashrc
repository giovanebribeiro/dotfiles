#
# ~/.bashrc
# Author: Giovane Boaviagem (about.me/giovanebribeiro)
#


# If not running interactively, don't do anything
[[ $- != *i* ]] && return

DOTFILES_LOC=`cat $HOME/.dotfiles-loc`

################################
###### SECTION 0: SOURCES ######
################################

source $DOTFILES_LOC/common/colorTable.sh
source $HOME/.git-completion.bash

##################################
###### SECTION 1: CONSTANTS ######
##################################


# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

################################
###### SECTION 2: ALIASES ######
################################

# General Aliases
alias tmux='tmux -2'
alias ..='cd ..'
alias t='bash $HOME/todo.txt/todo.sh'
alias tree='ls -R | grep ":$" | sed -e "s/:$//" -e "s/[^-][^\/]*\//--/g" -e "s/^/   /" -e "s/-/|/"'
alias la='ls -la'
alias ll='ls -l'
OS=`uname`
case $OS in
  "Darwin")
    alias reload='source $HOME/.bash_profile'
    ;;
  "*")
    alias reload='source $HOME/.bashrc'
    ;;
esac


# ALIASES per OS
[ -r "$HOME/.aliases" ] && source "$HOME/.aliases" &>/dev/null

################################
###### SECTION 3: EXPORTS ######
################################

# General Exports

# EXPORTS per OS
[ -r "$HOME/.exports" ] && source "$HOME/.exports" &>/dev/null


##################################
###### SECTION 3: FUNCTIONS ######
##################################

##
# returns the current git branch name
##
parse_git_branch(){
  git --version | grep "git" > /dev/null 2>&1 || return # check if git is installed
  echo `git status 2> /dev/null` | grep "nothing to commit" > /dev/null 2>&1
  if [ "$?" -eq "0" ] ; then
    echo ${bGreen}`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  else
    echo ${bRed}`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  fi
}

##
# returns the remote branch attatched to current branch
##
git_remote_branch(){
  git --version | grep "git" > /dev/null 2>&1 || return # check if git is installed
  echo "${bMagenta}[`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null`]"
}

##
# Converts a unicode code (like '\u250c')
# in a set readable by PS1 var ()
##
unicode_to_hex(){
  echo -e $1 | hexdump -v -e '/1 "%03o "' | awk '{print "\\" $1 "\\" $2 "\\" $3 }'
}

##
# Set the title of console
##
title() { 
#  printf '\e]2;%s\a' "$*";
  echo -n -e "\033]0;$*\007";
}

#####################################
###### SECTION 4: PS1 VARIABLE ######
#####################################

export PS1="\[\n${reset}\342\224\214 ${bYellow}\w${reset} - ${bBlue}$(ls -l | wc -l | sed 's: ::g') files, \$(ls -lah | grep -m 1 total | sed 's/total //')b${reset}\]\
  \[\n\342\224\234 \$(parse_git_branch) \$(git_remote_branch)${reset} - \
\$(\
\$(git status > /dev/null 2>&1);
  if [ \$? == 0 ]; then
  OUT_PULL=\$(git status 2> /dev/null | grep 'branch is behind');
  OUT_OK=\$(git status 2> /dev/null | grep 'working directory clean');
  OUT_PUSH=\$(git status 2> /dev/null | grep 'branch is ahead'); 
  if [ \"\$OUT_PULL\" != \"\" ]; then
  echo \"\"${bYellow}\"\342\254\207\";
  elif [ \"\$OUT_PUSH\" != \"\" ]; then
  echo \"\"${bYellow}\"\342\254\206\";
  else
  echo \"\"${bGreen}\"\316\236\012\";
  fi
  fi
  )${reset} - \$(if [[ \$? == 0 ]]; then echo ${bGreen}\"\342\234\223\"; else echo ${bRed}\"\342\234\227\"; fi)${reset} \]\
  \[\n\342\224\224 \$ "

#####################################
###### SECTION 4: PS1 VARIABLE ######
#####################################

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
